Resources:
  SessionTable:
    Type: AWS::DynamoDB::Table
    Properties:
      KeySchema:
        HashKeyElement:
          AttributeName:
            Fn::GetOptionSetting:
              OptionName: SessionHashKeyName
              DefaultValue: "MomentTime"
          AttributeType:
            Fn::GetOptionSetting:
              OptionName: SessionHashKeyType
              DefaultValue: "S"
        RangeKeyElement:
          AttributeName:
            Fn::GetOptionSetting:
              OptionName: SessionRangeKeyName
              DefaultValue: "City"
          AttributeType:
            Fn::GetOptionSetting:
              OptionName: SessionRangeKeyType
              DefaultValue: "S"
      ProvisionedThroughput:
        ReadCapacityUnits:
          Fn::GetOptionSetting:
            OptionName: SessionReadCapacityUnits
            DefaultValue: 4
        WriteCapacityUnits:
          Fn::GetOptionSetting:
            OptionName: SessionWriteCapacityUnits
            DefaultValue: 4

  SessionWriteCapacityUnitsLimit:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmDescription:
        {
          "Fn::Join":
            [
              "",
              [
                { "Ref": "AWSEBEnvironmentName" },
                " write capacity limit on the session table.",
              ],
            ],
        }
      Namespace: "AWS/DynamoDB"
      MetricName: ConsumedWriteCapacityUnits
      Dimensions:
        - Name: TableName
          Value: { "Ref": "SessionTable" }
      Statistic: Sum
      Period: 300
      EvaluationPeriods: 12
      Threshold:
        Fn::GetOptionSetting:
          OptionName: SessionWriteCapacityUnitsAlarmThreshold
          DefaultValue: 4
      ComparisonOperator: GreaterThanThreshold
      AlarmActions:
        - Ref: SessionAlarmTopic
      InsufficientDataActions:
        - Ref: SessionAlarmTopic

  SessionReadCapacityUnitsLimit:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmDescription:
        {
          "Fn::Join":
            [
              "",
              [
                { "Ref": "AWSEBEnvironmentName" },
                " read capacity limit on the session table.",
              ],
            ],
        }
      Namespace: "AWS/DynamoDB"
      MetricName: ConsumedReadCapacityUnits
      Dimensions:
        - Name: TableName
          Value: { "Ref": "SessionTable" }
      Statistic: Sum
      Period: 300
      EvaluationPeriods: 12
      Threshold:
        Fn::GetOptionSetting:
          OptionName: SessionReadCapacityUnitsAlarmThreshold
          DefaultValue: 4
      ComparisonOperator: GreaterThanThreshold
      AlarmActions:
        - Ref: SessionAlarmTopic
      InsufficientDataActions:
        - Ref: SessionAlarmTopic

  SessionThrottledRequestsAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmDescription:
        {
          "Fn::Join":
            [
              "",
              [
                { "Ref": "AWSEBEnvironmentName" },
                ": requests are being throttled.",
              ],
            ],
        }
      Namespace: AWS/DynamoDB
      MetricName: ThrottledRequests
      Dimensions:
        - Name: TableName
          Value: { "Ref": "SessionTable" }
      Statistic: Sum
      Period: 300
      EvaluationPeriods: 1
      Threshold:
        Fn::GetOptionSetting:
          OptionName: SessionThrottledRequestsThreshold
          DefaultValue: 1
      ComparisonOperator: GreaterThanThreshold
      AlarmActions:
        - Ref: SessionAlarmTopic
      InsufficientDataActions:
        - Ref: SessionAlarmTopic

  SessionAlarmTopic:
    Type: AWS::SNS::Topic
    Properties:
      Subscription:
        - Endpoint:
            Fn::GetOptionSetting:
              OptionName: SessionAlarmEmail
              DefaultValue: "townsdin@gmail.com"
          Protocol: email
# files:
#   "/var/app/sessiontable":
#     mode: "000444"
#     content: |
#       `{"Ref" : "SessionTable"}`
#       `{"Ref" : "AWS::Region"}`

#   "/var/app/composer.json":
#     mode: "000744"
# content: { "require": { "aws/aws-sdk-php": "*" } }
# container_commands:
#   "1-install-composer":
#     command: "cd /var/app; curl -s http://getcomposer.org/installer | php"
#   "2-install-dependencies":
#     command: "cd /var/app; php composer.phar install"
#   "3-cleanup-composer":
#     command: "rm -Rf /var/app/composer.*"
